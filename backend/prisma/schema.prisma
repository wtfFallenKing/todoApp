generator client {
  provider = "prisma-client-js"
  // output = "generated/client"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
}

enum Priority {
  low
  medium
  high
}

model User {
  id              String      @id             @default(cuid())
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt      @map("updated_at")
  
  email           String      @unique
  name            String?
  password        String

  workInterval    Int?        @default(50)    @map("work_interval")
  breakInterval   Int?        @default(10)    @map("break_interval")
  intervalsCount  Int?        @default(7)     @map("intervals_count")

  tasks           Task[]
  timeBlocks      TimeBlock[]
  sessions        Session[]

  @@map("user")
}

model Task {
  id              String      @id             @default(cuid())
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt      @map("updated_at")

  name            String
  priority        Priority?
  isCompleted     Boolean?    @default(false) @map("is_completed")

  user            User        @relation(fields: [userId], references: [id])
  userId          String      @map("user_id")

  @@map("task")
}

model TimeBlock {
  id              String      @id             @default(cuid())
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt      @map("updated_at")

  name            String
  color           String?
  duration        Int
  order           Int         @default(1)

  user            User        @relation(fields: [userId], references: [id])
  userId          String      @map("user_id")

  @@map("time_block")
}

model Session {
  id              String      @id             @default(cuid())
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt      @map("updated_at")

  isCompleted     Boolean?    @default(false) @map("is_completed")

  user            User        @relation(fields: [userId], references: [id])
  userId          String      @map("user_id")

  rounds          Round[]

  @@map("session")
}

model Round {
  id              String      @id             @default(cuid())
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt      @map("updated_at")

  isCompleted     Boolean?    @default(false) @map("is_completed")
  totalSeconds    Int         @map("total_seconds")

  session         Session     @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId       String      @map("pomodoro_session_id")

  @@map("round")
}